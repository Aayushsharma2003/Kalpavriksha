#include <stdio.h>
#include <stdlib.h>

 void merge(int arr[], int left, int mid, int right);
 void merge_Sort(int arr[], int left, int right);
 void print_Array(int arr[], int arr_size);
 
int main()
{
    int arr[] = { 92, 81, 43, 54, 65, 67 };
    int arr_size = sizeof(arr) / sizeof(arr[0]);

    printf("Before Sorting \n");
    print_Array(arr, arr_size);

    merge_Sort(arr, 0, arr_size - 1);

    printf("\nAfter Sorting \n");
    print_Array(arr, arr_size);
    return 0;
}

void merge(int arr[], int left, int mid, int right)
{
    int i, j, k;
    int n1 = mid - left + 1;
    int n2 = right - mid;

    
    int temp_L[n1], temp_R[n2];

     
    for (i = 0; i < n1; i++)
        temp_L[i] = arr[left + i];
    for (j = 0; j < n2; j++)
        temp_R[j] = arr[mid + 1 + j];

     
    i = 0;
    j = 0;
    k = left;
    while (i < n1 && j < n2) {
        if (temp_L[i] <= temp_R[j]) {
            arr[k] = temp_L[i];
            i++;
        }
        else {
            arr[k] = temp_R[j];
            j++;
        }
        k++;
    }

    
    while (i < n1) {
        arr[k] = temp_L[i];
        i++;
        k++;
    }

 
    while (j < n2) {
        arr[k] = temp_R[j];
        j++;
        k++;
    }
}

 
void merge_Sort(int arr[], int left, int right)
{
    if (left < right) {
        int mid = left + (right - left) / 2;

         
        merge_Sort(arr, left, mid);
        merge_Sort(arr, mid + 1, right);

        merge(arr, left, mid, right);
    }
}
